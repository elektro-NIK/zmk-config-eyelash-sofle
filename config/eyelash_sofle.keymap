#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    // Activate ADJUST layer by pressing raise and lower

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        bindings = <&kp>;
        #binding-cells = <1>;
        quick-release;
        release-after-ms = <1000>;
        label = "Sticky key quick release";
    };

    slq: sticky_layer_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "Sticky layer quick release";
        bindings = <&mo>;
        #binding-cells = <1>;
        release-after-ms = <1000>;
        quick-release;
    };

    tdls: tap_dance_left_shift {
        compatible = "zmk,behavior-tap-dance";
        label = "LShift / Capsword";
        #binding-cells = <0>;
        bindings = <&skq LSHFT>, <&caps_word>;
    };

    tdrs: tap_dance_right_shift {
        compatible = "zmk,behavior-tap-dance";
        label = "RShift / Capsword";
        #binding-cells = <0>;
        bindings = <&skq RSHFT>, <&caps_word>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        combo_1 {
            bindings = <&kp N1>;
            key-positions = <14 27>;
            layers = <0>;
        };

        combo_2 {
            bindings = <&kp N2>;
            key-positions = <15 28>;
            layers = <0>;
        };

        combo_3 {
            bindings = <&kp N3>;
            key-positions = <29 16>;
            layers = <0>;
        };

        combo_4 {
            bindings = <&kp N4>;
            key-positions = <17 30>;
            layers = <0>;
        };

        combo_5 {
            bindings = <&kp N5>;
            key-positions = <31 18>;
            layers = <0>;
        };

        combo_6 {
            bindings = <&kp N6>;
            key-positions = <20 33>;
            layers = <0>;
        };

        combo_7 {
            bindings = <&kp N7>;
            key-positions = <21 34>;
            layers = <0>;
        };

        combo_8 {
            bindings = <&kp N8>;
            key-positions = <35 22>;
            layers = <0>;
        };

        combo_9 {
            bindings = <&kp N9>;
            key-positions = <23 36>;
            layers = <0>;
        };

        combo_0 {
            bindings = <&kp N0>;
            key-positions = <24 37>;
            layers = <0>;
        };

        combo_F1 {
            bindings = <&kp F1>;
            key-positions = <14 1>;
            layers = <0>;
        };

        combo_F2 {
            bindings = <&kp F2>;
            key-positions = <2 15>;
            layers = <0>;
        };

        combo_F3 {
            bindings = <&kp F3>;
            key-positions = <3 16>;
            layers = <0>;
        };

        combo_F4 {
            bindings = <&kp F4>;
            key-positions = <17 4>;
            layers = <0>;
        };

        combo_F5 {
            bindings = <&kp F5>;
            key-positions = <18 5>;
            layers = <0>;
        };

        combo_F6 {
            bindings = <&kp F6>;
            key-positions = <20 7>;
            layers = <0>;
        };

        combo_F7 {
            bindings = <&kp F7>;
            key-positions = <8 21>;
            layers = <0>;
        };

        combo_F8 {
            bindings = <&kp F8>;
            key-positions = <22 9>;
            layers = <0>;
        };

        combo_F9 {
            bindings = <&kp F9>;
            key-positions = <10 23>;
            layers = <0>;
        };

        combo_F10 {
            bindings = <&kp F10>;
            key-positions = <24 11>;
            layers = <0>;
        };

        combo_F11 {
            bindings = <&kp F11>;
            key-positions = <25 12>;
            layers = <0>;
        };

        combo_F12 {
            bindings = <&kp F12>;
            key-positions = <25 38>;
            layers = <0>;
        };

        combo_EXCL {
            bindings = <&kp EXCL>;
            key-positions = <27 40>;
            layers = <0>;
        };

        combo_AT {
            bindings = <&kp AT>;
            key-positions = <28 41>;
            layers = <0>;
        };

        combo_HASH {
            bindings = <&kp HASH>;
            key-positions = <29 42>;
            layers = <0>;
        };

        combo_DLLR {
            bindings = <&kp DLLR>;
            key-positions = <30 43>;
            layers = <0>;
        };

        combo_PRCNT {
            bindings = <&kp PRCNT>;
            key-positions = <44 31>;
            layers = <0>;
        };

        combo_CARET {
            bindings = <&kp CARET>;
            key-positions = <33 46>;
            layers = <0>;
        };

        combo_AMPS {
            bindings = <&kp AMPS>;
            key-positions = <34 47>;
            layers = <0>;
        };

        combo_ASTRK {
            bindings = <&kp ASTRK>;
            key-positions = <35 48>;
            layers = <0>;
        };

        combo_LPAR {
            bindings = <&kp LPAR>;
            key-positions = <49 36>;
            layers = <0>;
        };

        combo_RPAR {
            bindings = <&kp RPAR>;
            key-positions = <37 50>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";
            bindings = <
&kp GRAVE   &kp N1    &kp N2    &kp N3     &kp N4  &kp N5       &kp UP_ARROW     &kp N6     &kp N7  &kp N8     &kp N9    &kp N0    &none
&kp ESC     &kp Q     &kp W     &kp E      &kp R   &kp T        &kp DOWN_ARROW   &kp Y      &kp U   &kp I      &kp O     &kp P     &kp BSPC
&kp TAB     &kp A     &kp S     &kp D      &kp F   &kp G        &kp LEFT_ARROW   &kp H      &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
&tdls       &kp Z     &kp X     &kp C      &kp V   &kp B        &kp RIGHT_ARROW  &kp N      &kp M   &kp COMMA  &kp DOT   &kp FSLH  &tdrs
&kp C_MUTE  &kp LGUI  &kp LALT  &kp LCTRL  &slq 1  &kp SPACE    &kp ENTER        &kp ENTER  &slq 2  &kp RCTRL  &kp RALT  &kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        lower_layer {
            display-name = "Symbols";
            bindings = <
&trans     &kp F1     &kp F2     &kp F3       &kp F4    &kp F5       &mmv MOVE_UP     &kp F6     &kp F7    &kp F8           &kp F9     &kp F10   &kp F11
&kp GRAVE  &kp N1     &kp N2     &kp N3       &kp N4    &kp N5       &mmv MOVE_DOWN   &kp N6     &kp N7    &kp N8           &kp N9     &kp N0    &kp F12
&trans     &kp EXCL   &kp AT     &kp HASH     &kp DLLR  &kp PRCNT    &mmv MOVE_LEFT   &kp CARET  &kp AMPS  &kp KP_MULTIPLY  &kp LPAR   &kp RPAR  &kp PIPE
&trans     &kp EQUAL  &kp MINUS  &kp KP_PLUS  &kp LBRC  &kp RBRC     &mmv MOVE_RIGHT  &kp LBKT   &kp RBKT  &kp SEMI         &kp COLON  &kp BSLH  &trans
&trans     &trans     &trans     &trans       &trans    &trans       &mkp LCLK        &trans     &trans    &trans           &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "Navigate";
            bindings = <
&trans  &trans      &trans     &trans       &trans       &trans      &mmv MOVE_UP     &trans    &trans     &trans     &trans     &trans  &trans
&trans  &kp INS     &kp PSCRN  &kp K_CMENU  &trans       &trans      &mmv MOVE_DOWN   &trans    &kp PG_DN  &kp PG_UP  &trans     &trans  &kp DEL
&trans  &kp LALT    &kp LCTRL  &kp LSHFT    &trans       &kp CLCK    &mmv MOVE_LEFT   &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans  &trans
&trans  &kp K_UNDO  &kp K_CUT  &kp K_COPY   &kp K_PASTE  &trans      &mmv MOVE_RIGHT  &trans    &trans     &trans     &trans     &trans  &trans
&trans  &trans      &trans     &trans       &trans       &trans      &mkp LCLK        &trans    &trans     &trans     &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        adjust_layer {
            display-name = "Adjust";
            bindings = <
&bt BT_CLR       &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4       &trans  &none       &none     &none  &none       &none  &out OUT_TOG
&rgb_ug RGB_TOG  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_EFF    &trans  &none       &none     &none  &none       &none  &studio_unlock
&none            &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_SPD  &rgb_ug RGB_SPI  &none              &trans  &kp C_PREV  &kp C_PP  &none  &kp C_NEXT  &none  &none
&none            &none            &none            &none            &none            &none              &trans  &none       &none     &none  &none       &none  &none
&none            &none            &none            &none            &none            &none              &trans  &none       &none     &none  &none       &none
            >;
        };
    };
};
